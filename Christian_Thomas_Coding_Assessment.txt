1. 
3 bytes for the 3 chars in 0.1
1 byte for what I'm assuming to be a space at the end of the first line 
1 byte for the next line

5 bytes in total

2.
#I returned the color from each function to show myself it was working while #testing

def paintItRed():
    return "red"

def paintItGreen():
    return "green"

def paintItBlue():
    return "blue"

def paintIt():
    return "default"

def paintMe(aColor):
    switcher = {
	"red": paintItRed,
	"green": paintItGreen,
    	"blue": paintItBlue,
    	"default": paintIt	
    }
    x = switcher.get(aColor)
    print x()

myColor = "blue"

paintMe(myColor)


3.
The bug in this program occurs when the input is a value that comes close to the next unit of memory, for example if the input is 999,999 bytes, which is almost 1 MB but not quite, the correct answer should be 1.0 MB.  The algorithm is rounding the bytes to 1000.0 kB, which is correct although the significand of 1000 is not within the algorithm's range that it looks for when changing the unit of memory, resulting in the return value being 1000.0 kB instead of 1.0 MB.  This same error will occur for each input that approaches the next unit of memory. The fix is to change the exponent to the next unit if an input value is to be rounded up to a number that should change its exponent. Using the 999,999 example, if the number were to exceed 999,950, which our example does, it should change to MB.  This fix would also need to be implemented for every instance in which rounding would cause a change in unit of memory.


4. and 5.
For these questions I had trouble dockerizing my programs, I think it has something to do with my manifest file which is included in the answer for question 5 as I attempted it there but wasn't able to get it to work. I included each answer in the pull request.


